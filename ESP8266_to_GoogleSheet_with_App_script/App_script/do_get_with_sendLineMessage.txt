function doGet(e) {
  Logger.log(JSON.stringify(e));
  var result = 'Ok';
  if (e.parameter == 'undefined') {
    result = 'No Parameters';
  }
  else {
    var sheet_id = '____?____';  		// Spreadsheet ID.
    var sheet_name = "____?____";  		// Sheet Name in Google Sheets.

    var sheet_open = SpreadsheetApp.openById(sheet_id);
    var sheet_target = sheet_open.getSheetByName(sheet_name);

    var newRow = sheet_target.getLastRow() + 1;
    var rowDataLog = [];
    var Data_for_H3;
    var Data_for_I3;
    var Data_for_J3;
    var Data_for_K3;
    var Data_for_L3;
    var Data_for_M3;
    var Curr_Date = Utilities.formatDate(new Date(), "Asia/Jakarta", 'dd/MM/yyyy');
    rowDataLog[0] = Curr_Date;	// Date will be written in column A.
    Data_for_H3 = Curr_Date;	// Date will be written in column H3.

    var Curr_Time = Utilities.formatDate(new Date(), "Asia/Jakarta", 'HH:mm:ss');
    rowDataLog[1] = Curr_Time;	// Time will be written in column B.
    Data_for_I3 = Curr_Time;	// Time will be written in column I3.

    var sts_val = '';

    for (var param in e.parameter) {
      Logger.log('In for loop, param=' + param);
      var value = stripQuotes(e.parameter[param]);
      Logger.log(param + ':' + e.parameter[param]);
      switch (param) {
        case 'sts':
          sts_val = value;
          break;

        case 'srs':
          rowDataLog[2] = value;	// Sensor Reading Status will be written in column C.
          Data_for_J3 = value;  	// Sensor Reading Status will be written in column J3.
          result += ', Reading Status Written on column C';
          break;

        case 'temp':
          rowDataLog[3] = value;	// The temperature value will be written in column D.
          Data_for_K3 = value;	// The temperature value will be written in column K3.
          result += ', Temperature Written on column D';
          break;

        case 'humd':
          rowDataLog[4] = value; // The humidity value will be written in column E.
          Data_for_L3 = value;  // The humidity value will be written in column L3.
          result += ', Humidity Written on column E';
          break;

        case 'swtc':
          rowDataLog[5] = value;  // The state of Switch_1 will be written in column F.
          Data_for_M3 = value;  // The state of Switch_1 will be written in column M3.
          result += ', Switch Written on column F';
          break;

        default:
          result += ", unsupported parameter";
      }
    }

    var lineMessage = "Temperature : " + rowDataLog[3] + "\nHumidity : " + rowDataLog[4];
    sendLineMessage(lineMessage);

    // Conditions for writing data received from NodeMCU to Google Sheets.
    if (sts_val == 'write') {
      // Writes data to the "Sensor Data Logger" section.
      Logger.log(JSON.stringify(rowDataLog));
      var newRangeDataLog = sheet_target.getRange(newRow, 1, 1, rowDataLog.length);
      newRangeDataLog.setValues([rowDataLog]);

      // Write the data to the "Latest Sensor Data" section.
      var RangeDataLatest = sheet_target.getRange('H3:M3');
      RangeDataLatest.setValues([[Data_for_H3, Data_for_I3, Data_for_J3,
        Data_for_K3, Data_for_L3, Data_for_M3]]);
      return ContentService.createTextOutput(result);
    }

    // Conditions for sending data to NodeMCU when NodeMCU reads data from Google Sheets.
    if (sts_val == 'read') {
      // Use the line of code below if you want NodeMCU to read data from columns K3-M3.
      // var all_Data = sheet_target.getRange('K3:M3').getDisplayValues();

      // Use the line of code below if you want ESP32 to read data from columns K3-M3.
      var all_Data = sheet_target.getRange('K3:M3').getValues();
      return ContentService.createTextOutput(all_Data);
    }
  }
}

function stripQuotes(value) {
  return value.replace(/^["']|['"]$/g, "");
}

function sendLineMessage(messages) {
  var url = 'https://api.line.me/v2/bot/message/push';
  var user_id = '___?___';
  var ch_access_token = '___?___';

  var payload = {
    to: user_id, 
    messages: [
      {
        type: 'text',
        text: messages
      }
    ]
  };

  var options = {
    'method': 'post',
    'headers': {
      'Authorization': 'Bearer ' + ch_access_token,
      'Content-Type': 'application/json'
    },
    'payload': JSON.stringify(payload)
  };

  UrlFetchApp.fetch(url, options);
  
}

